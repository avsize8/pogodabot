import math
from aiogram import Router , types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
import datetime
import aiohttp


from config_data.config import Config, load_config

from key_boards.main_menu import inline1, inline2

config: Config = load_config()

router: Router = Router()

KEY = "your key"


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!",reply_markup=inline1())
    
    
@router.callback_query(F.data == 'start')
async def startf(callback: CallbackQuery):
    await callback.message.answer("–≤–æ—Ç —Ç–≤–æ—è –∫–ª–∞–≤–∞",reply_markup=inline1(),show_alert=False)
    
    
@router.callback_query(F.data == 'sitys')
async def pizda(callback: CallbackQuery):
    await callback.message.answer("–≤–æ—Ç —Ç–≤–æ—è –∫–ª–∞–≤–∞",reply_markup=inline2(),show_alert=False)

    
    
class Reg(StatesGroup):
    city = State()
    
    
@router.callback_query(F.data == 'weather')
async def data(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Reg.city)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥",show_alwert=False)


@router.message(Reg.city)
async def get_weather(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    city_data = await state.get_data()
    city = city_data['city']
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={KEY}") as response:
                data = await response.json()
                city = data["name"]
                cur_temp = data["main"]["temp"]
                humidity = data["main"]["humidity"]
                pressure = data["main"]["pressure"]
                wind = data["wind"]["speed"]

        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
        await message.reply(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
            f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
            f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
            f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
            f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
        )
        await state.clear()
    except(KeyError):
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")
        await state.clear()
        
        
@router.message(F.text.lower() == ("–º–æ—Å–∫–≤–∞"))
async def get_weather1(message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=–º–æ—Å–∫–≤–∞&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )
        

@router.message(F.text.lower() == ("–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"))
async def get_weather2(message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )
    
    
@router.message(F.text.lower() == ("—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥"))
async def get_weather3(message: types.Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )


@router.callback_query(F.data == "piter")
async def get_weather4(callback: CallbackQuery):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await callback.message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )

@router.callback_query(F.data == "ekb")
async def get_weather5(callback: CallbackQuery):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await callback.message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )

@router.callback_query(F.data == "moskow")
async def get_weather6(callback: CallbackQuery):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q=–º–æ—Å–∫–≤–∞&lang=ru&units=metric&appid={KEY}") as response:
            data = await response.json()
            city = data["name"]
            cur_temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]

    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        
    await callback.message.answer(f"‚è≤Ô∏è{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
        f"üåß–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C \n\n"
        f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\nüå¨–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç\n\nüí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n\n"
        f"‚òÄÔ∏è–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n\nüåÖ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n\n‚è≥–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
        f"‚≠êÔ∏è–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!‚≠êÔ∏è"
    )
